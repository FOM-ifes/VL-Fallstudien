---
title: "IRIS Datensatz (Clusteranalyse)"
lang: de
author: "Ihr Name"
date: last-modified
format: 
  html:
    toc: true
    html-math-method: katex
  pdf:
    toc: true
    number-sections: false
    colorlinks: true 
    papersize: a4
---

```{r}
#| label: setup
#| include: false
library(mosaic)
library(cluster)
set.seed(1896) # Zufallszahlengenerator
```

# Hintergrundwissen zum IRIS Datensatz

Über den Befehl `iris` können Sie in R auf den IRIS Datensatz zugreifen. Die Bezeichnung ist auf die gleichnamige griechische Göttin des Regenbogens zurückzuführen, nach der ebenfalls die Pflanzengattung der Schwertlilien benannt ist. Im IRIS Datensatz befinden sich insgesamt 150 Beobachtungen mit jeweils vier Merkmalsvariablen: Die Breite und Länge des Kelchblatts (Sepalum) sowie des Kronblatts (Petalum). Darüber hinaus unterscheidet der IRIS Datensatz in drei verschiedene Schwertlilienarten (Setosa, Versicolor und Virginica), welche sich jeweils in Breite und Länge des Kelch- und Kronblatts unterscheiden.

Dieser Fallstudie liegen zwei Fragestellungen zugrunde:

> (1) Wie unterscheiden sich Setosa, Versicolor und Virginica in den Ausprägungen der Merkmalsvariablen?

> (2) Fallen die Unterschiede deutlich genug aus, um erkennen zu können, dass es sich um drei verschiedene Schwertlilenarten handelt?

Dafür wird in dieser Fallstudie die Clusteranalyse vorgestellt. Die Clusteranalyse kommt bspw. in der Markt- und Meinungsforschung zur Anwendung. Dort geht es dann selbstverständnlich nicht um Schwertlilienarten, sondern bspw. um Kundinnen und Kunden, die zwar allesamt verschieden sein können, von denen sich einige aber doch so sehr ähneln können, dass es sich lohnen könnte, diese zu einem Cluster, d.h. zu einer Gruppe von ähnlichen Kundinnen und Kunden, zusammenzufassen. Dies ermöglicht bspw. die Entwicklung effizienter Marketingstrategien.

# Datenverständnis

## Univariate Statistik des IRIS Datensatzes

Einen ersten Einblick in den IRIS Datensatz über die Ausweisung der Minimum- und Maximumwerte sowie Median und Mean als ausgewählte Lagemaße der Merkmalsvariablen ist über den Befehl `df_stats (...)` möglich. Alternativ könnte natürlich auch der Befehl `inspect(...)` genutzt werden. Diese deskriptiven Kennwerte beziehen sich zunächst auf alle Schwertlilienarten und ermöglichen daher noch keinen Einblick in die Ausprägungen der Merkmalsvariablen innerhalb der verschiedenen Schwertlilienarten:

```{r}
# Deskriptive Kennwerte des IRIS Datensatzes (unabhängige Variablen)
df_stats( ~ Sepal.Length + Sepal.Width
          + Petal.Length + Petal.Width,
              data = iris, min, median, mean, max)
```

Der Befehl `tally(...)` ermöglicht darüber hinaus eine erste tabellarische Übersicht über die Anzahl an verschiedenen Schwerlilienarten:

```{r}
#| warning: false
# Deskriptive Kennwerte des IRIS Datensatzes (abhängige Variable)
tally( ~ Species, data = iris)
```

#### Fragen

-   Vergleichen Sie die Längen von Kelch- und Kronblatt. Welches Blatt ist länger?

    -   *Antwort: Beim Kelchblatt (Sepal) fallen min, median, mean und max länger aus.*

-   Wie viele Fälle der verschiedenen Schwertlilienarten liegen jeweils vor?

    -   *Antwort: Von jeder Schwertlilienart liegen insgesamt 50 vor.*

## Univariate Statistik, ausdifferenziert nach Schwertlilienarten

Mit dem Befehl `df_stats(...)` lassen sich die Ausprägungen der Merkmalsvariablen selbstverständlich auch nach den verschiedenen Schwertlilienarten ausdifferenzieren Dies ermöglicht einen systematischen Vergleich der Ausprägungen der Merkmalsvariablen zwischen den verschiedenen Schwertlilienarten:

```{r}
df_stats(Sepal.Length + Sepal.Width + Petal.Length
         + Petal.Width ~ Species, data = iris, min, median, mean, max)
```

#### Fragen

-   Welche Schwertlilienart hat die längsten Kelch- und Kronblätter?

    -   *Antwort: Virginica.*

-   Welche Schwertlilienart hat das schmalste Kronblatt?

    -   *Antwort: Setosa.*

## Bivariate Statistik des IRIS Datensatzes

Die Unterschiede zwischen den verschiedenen Schwertlilienarten lassen sich auch mittels Scatterplot grafisch darstellen In einem Scatterplot werden jeweils zwei der Merkmalsvariablen auf der Y-Achse und der X-Achse abgetragen. Dies ermöglicht der Befehl `gf_point(...)` inklusive farblicher Unterscheidung zwischen den verschiedenen Schwerlilienarten:

```{r}
# Scatterplot zur Visualisierung der Unterschiede
gf_point(Petal.Width ~ Petal.Length, color = ~ Species, data = iris)
```

Es ist deutlich zu erkennen, dass sich die Schwertlilienart Setosa in der linken unteren Ecke zu konzentrieren und somit von den anderen beiden Schwertlilienarten zu unterscheiden scheint. Diese Erkenntnis in Verbindung mit den konkreten Werten aus der univariaten Statistik ermöglichen eine detaillierte Beschreibung der Schwertlilienart Setosa.

## Detaillierte Beschreibung der Schwertlilienarten

Nun geht es darum, die aus der univariaten und bivariaten Statistik gewonnenen Erkenntnisse zu validieren. Hierbei kommt es auf die möglichst detaillierte Beschreibung der jeweiligen Schwertlilienarten an. Über den Befehl `filter(...)` in Verbindung mit den Vergleichsoperatoren `<=` sowie `>=` können die Ausprägungen der jeweiligen Schwertlilienarten in den entsprechenden Merkmalsvariablen spezifiziert werden.

Die Schwertlilienart Setosa ist bspw. die einzige Schwertlilienart, bei der die Ausprägungen in der Merkmalsvariable `Petal Width` kleiner als der Wert `1` (hier: Maximum von 0.60) ist und die `Petal Length` übersteigt den Wert `2` (hier: Maximum von 1.90) nicht. Beide Bedingungen lassen sich über ein `&` entsprechend festhalten:

```{r}
# Beschreibung der Schwertlilienarten Setosa
erste_schwertlilienart <-
  filter(iris, Petal.Length <= "2" & Petal.Width <= "1")
tally( ~ Species, data = erste_schwertlilienart)
```

Dadurch kann über die detaillierte Beschreibung und als Folge der Ähnlichkeiten der einzelnen Beobachtungen innerhalb der Schwerlilienart Setosa diese über den Befehl `tally(...)` vollständig (hier: 50 von 50) aufgerufen werden, ohne fälschlicherweise eine andere Schwertlilienart mit aufzurufen.

#### R Übung

Wenn auch bei den Schwertlilienarten Versicolor und Virginica von Ähnlichkeiten zwischen den Beobachtungen innerhalb einer Schwertlilienart und somit von Unterschieden zwischen den verschiedenen Schwertlilienarten ausgegangen werden kann, dann müssten sich auch diese Schwertlilienarten über eine ähnliche Herangehensweise identifizieren lassen.

-   Wie unterscheiden sich Versicolor und Virginica jeweils von den anderen Schwertlilienarten?

    -   *Antwort: Das Kronblatt (Petal) ist bspw. deutlich länger und breiter als bei Setosa.*

-   Wie viele Beobchtungen der Schwertlilienarten Versicolor, respektive Virginica, können Sie auf diese Weise aufrufen?

    -   *Antwort: Eine mögliche Lösung könnte bspw. 49/50 Versicolor bei insgesamt 9 Fehlklassifikationen sein, respektive 47/50 Virginica bei 5 Fehlklassifikationen. Ist Ihr Ergebnis besser als dieser "statistische Schnellschuss"?*

-   Warum können Sie bei Versicolor und Virginica nicht 50 / 50 korrekt aufrufen, bzw. wieso werden Beobachtungen einer anderen Schwertlilienart ebenfalls aufgerufen?

    -   *Antwort: Versicolor und Virginica ähneln sich hinsichtlich der Länge und Breite der verschiedenen Blattarten teilweise so deutlich, dass diese nicht klar differenziert werden können.*

Setzen Sie Ihre Erkenntnisse jeweils für Versicolor und Virginica (jeweils ohne `#`) an der Stelle `IHRE_EINGABE` entsprechend ein. Orientieren Sie sich hierfür insbesondere an den Minimum- und Maximumwerten der Merkmalsvariablen:

#### Ihre Lösung für Versicolor und Virginica

```{r}
# Beschreibung der Schwertlilienarten Versicolor
zweite_schwertlilienart <- filter(iris, Petal.Length >= "3" & Petal.Length <= "5" & Petal.Width <= "2")
tally( ~ Species, data = zweite_schwertlilienart)
```

```{r}
# Beschreibung der Schwertlilienarten Virginica
dritte_schwertlilienart <- filter(iris, Petal.Length >= "4.5" & Petal.Width >= "1.6")
tally( ~ Species, data = dritte_schwertlilienart)
```

# Clusteranalyse

## k-Means Clustering

Die bisherige Datenanalyse diente dem Datenverständnis und war nur deshalb möglich, weil die Information über die drei verschiedenen Schwertlilienarten vorab in der Merkmalsvariable `Species` hinterlegt war. Oftmals ist diese Information allerdings nicht vorab bekannt, bspw. bei der Kundensegmentierung: Kundinnen und Kunden sind nicht gleich, manche sind sich aber ähnlich. Bevor also die Frage nach den Ähnlichkeiten (oder Unterschieden) zwischen den Beobachtungen beantwortet werden kann, ist zunächst die Frage nach der Anzahl an zu unterscheidenden Gruppen von Kundinnen und Kunden zu beantworten.

Bei den Schwertlilien waren drei Schwertlilienarten zu unterscheiden. Aber wie viele Gruppen wären bei einer Kundensegmentierung zu unterscheiden? Zur Beantwortung dieser Frage kann auf eine Clusteranalyse zurückgegriffen werden, die anhand des k-Means Clusterings und ebenfalls am IRIS Datensatz vorgestellt werden soll. Arten und Gruppen von Beobachtungen mit Ähnlichkeiten zueinander werden hierbei zu Clustern zusammengefasst.

Das Ziel beim k-Means Clustering ist demnach die Einteilung eines Datensatzes in eine Anzahl `k` an Clustern, so dass die Summe der quadrierten Abweichungen von den Cluster-Schwerpunkten (hier besteht eine Analogie zu den Lagemaßen, respektive dem Mean-Wert) innerhalb eines jeden Clusters minimal ist.

## Within Cluster Sum of Squares

Within Cluster Sum of Squares (WCSS) ist eine Methode zur Bewertung der Qualität von Clustering-Ergebnissen und zur Vorabbestimmung der Anzahl `k` an Clustern. Dabei wird zunächst die Summe der quadratischen Abweichungen (Sum of Squares) aller Punkte innerhalb eines Clusters von dessen Zentrum ermittelt.

Die Berechnung der WCSS beginnt damit, dass jeder Punkt im Datensatz einem bestimmten Cluster zugeordnet wird. Anschließend wird für jedes Cluster das Zentrum berechnet, das als der durchschnittliche Wert aller Punkte innerhalb des Clusters definiert ist. Dann wird die Summe der quadratischen Abweichungen jedes Punktes innerhalb des Clusters von seinem Zentrum berechnet und aufsummiert. Dies wird für jedes Cluster im Datensatz durchgeführt und die Ergebnisse werden addiert, um den Gesamtwert des WCSS zu erhalten.

Ein niedriger WCSS-Wert bedeutet, dass die Punkte innerhalb jedes Clusters näher beieinander liegen und somit eine höhere Dichte aufweisen. Das bedeutet, dass das Clustering besser ist, da es klarere und besser definierte Cluster gibt. Ein hoher WCSS-Wert deutet hingegen darauf hin, dass die Punkte innerhalb jedes Clusters weiter auseinander liegen und somit eine geringere Dichte aufweisen, was darauf hinweisen kann, dass das Clustering schlechter ist.

Zur Ermittlung der WCSS empfielt es sich, die relevanten Merkmalsvariablen zunächst zu standardisieren, bzw. zu z-transformieren. Dies kann über den Befehl `scale(...)` erreicht werden:

```{r}
# Relevante Merkmalsvariablen standardisieren
z_iris <- scale(iris[c(1:4)])
z_iris <- as.data.frame(z_iris)
```

Die Überprüfung der Standardisierung kann anschließend über die Befehle `mean(...)` und `sd(...)` erfolgen, wobei für alle standardisierten Variablen ein Mittelwerte von `0` und eine Standadabweichung von `1` vorliegen sollte; Nachfolgend am Beispiel für die Merkmalsvariable `Sepal.Length` dargestellt.

Arithmetisches Mittel:

```{r}
# Arithmetisches Mittel
round(mean( ~ Sepal.Length, data = z_iris))
```

Standardabweichung:

```{r}
# Standardabweichung
sd( ~ Sepal.Length, data = z_iris)
```

Nachfolgend soll die WCSS mit dem standardisierten IRIS Datensatz exemplarisch ermittelt werden. Hierbei wird wie folgt vorgegangen: Die Summe der quadratischen Abweichungen aller Punkte (`x`) innerhalb jedes Clusters von dessen Zentrum (`c`) lässt sich über die Anzahl der Fälle `n` und die Anzahl der Cluster `k` formal über folgende Optimierungsfunktion `J` minimieren:

$$
J = \sum_{j = 1}^k \sum_{i = 1}^n ||{( {x_i}^{(j)} - c_j )}||²
$$

Ausgehend von den vorherigen Analyseschritten kann für den IRIS Datensatz davon ausgegangen werden, dass die Clusteranzahl zwischen 1 und 10 (die Anzahl der vermuteten Cluster ist demnach vorab zu schätzen) liegen wird. In R ist die WCSS dabei wie folgt zu ermitteln:

```{r}
# Within Cluster Sum of Squares (WCSS) ermitteln
set.seed(1701)
wcss = vector()
for (i in 1:10) wcss[i] <- sum(kmeans(z_iris, i)$withinss)
```

Grafisch lässt sich die WCSS zusätzlich über den Befehl `gf_line(...)` abbilden. Da die Ermittlung der WCSS über eine voreingestellte Clusteranzahl zwischen 1 und 10 Clustern erfolgt ist, wird auch die Visualisierung für eine Clusteranzahl zwischen 1 und 10 vorgenommen. Die nachfolgende Abbildung wird auch `Ellenbogenknick-Grafik` genannt. An der Knickstelle flacht der fallende Verlauf deutlich ab, woraus sich ableiten lässt, dass ein zusätzliches Cluster den WCSS-Wert nicht mehr wesentlich senken wird. Die Knickstelle ist nachfolgend über die Befehle `gf_hline(...)` und `gf_vline(...)` hervorgehoben. Der X-Achse kann die somit ermittelte Anzahl `k` an Clustern entnommen werden:

```{r}
# Within Cluster Sum of Squares (WCSS) visualisieren
gf_line(wcss ~ 1:10, xlab = "cluster") %>%
  gf_hline(yintercept = 138.88836, linetype = 2) %>%
    gf_vline(xintercept = 3, linetype = 2)
```

Demnach konnten 3 Cluster im IRIS Datensatz identifiziert werden.

#### Fragen

-   Ist die Standardisierung der Merkmalsvariablen beim IRIS Datensatz erforderlich?

    -   *Antwort: Nicht wirklich, da mit Blattlänge und -breite vergleichbare Variablen und Skalierungen zugrunde liegen.*

-   Wie verändert sich die Anzahl `k` an Clustern, wenn Sie die hier explizierten Schritte ohne vorherige Standardisierung wiederholen?

    -   *Antwort: Entsprechend der vorherigen Antwort bleibt die Anzahl an Clustern unverändert. Hinweis: Zum Ausprobieren geben Sie `iris[c(1:4)]` an Stelle von `z_iris` in den Befehl zur Ermittlung der WCSS ein.*

## Clusterlösung

Schließlich kann das k-Means Clustering unter Spezifizierung der Anzahl `k` an Clustern durchgeführt werden. Hierfür steht der Befehl `kmeans(...)` zur Verfügung. Der Befehl `clusplot(...)` visualisiert die Clusterlösung entsprechend:

```{r}
# K-Means Clustering
k_means_cluster <- kmeans(iris[,-5], 3, nstart=30)
clusplot(iris, k_means_cluster$cluster,
         color = TRUE, shade = TRUE, lines = 0)
```

Wie gut die verschiedenen Schwertlilienarten den jeweiligen Clustern zugeordnet worden sind, kann über den Befehl `table(...)` eingesehen werden:

```{r}
# Größe der identifizierten Cluster
k_means_cluster$size
```

Demnach hat die Clusteranalyse die Anzahl `k` an Clustern im IRIS Datensatz korrekt identifiziert, hat aber Schwierigkeiten mit der Zuordnung der einzelnen Schwertlilienarten in die jeweiligen Cluster. Dies liegt daran, dass die Identifikation der Anzahl `k` an Clustern vornehmlich eine Aufgabe für die Clusteranalyse darstellt, wohingegen die Identifikation und Zuordnung als Klassifikationsverfahren auf andere Algorithmen setzen würde.

#### R Übung

-   Was passiert, wenn Sie mehr als 3 Cluster im Befehl `kmeans(...)` spezifizieren?

    -   *Antwort: Versicolor und Virinica würden nicht in zwei Schwertlilienarten unterteilt werden, sondern in drei. Dabei gibt es zwar weniger Überschneidungen, aber die Zuordnung entspricht nicht der tatsächlichen Einteilung in die drei Schwertlilienarten.*

-   Spezifizieren Sie 50 statt 30 Beobachtungen zum Start der Clusteranalyse im Befehl `kmeans(...)`. Wie verändert sich die Clusterlösung?

    -   *Antwort: Ausgehend von den jeweils 50 verschiedenen Schwerlilienarten verändert sich die Zuordnung nur marginal. Bei anderen Datensätzen kann eine Spezifizierung der Beobachtungen zum Start der Clusteranalyse allerdings erheblichen Einfluss nehmen, bspw. dann, wenn weniger als 50 zuzuordnende Fälle vorliegen.*
